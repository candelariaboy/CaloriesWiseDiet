# -*- coding: utf-8 -*-
"""CalorieWiseChatBot.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1lsRGruOfWKKDw6jYtOynjJMC_l-jCTfE

#Pip Installation and Module Imports
"""

pip install unsloth

import os
from unsloth import FastLanguageModel
import torch
from trl import SFTTrainer
from transformers import TrainingArguments
from datasets import load_dataset

"""# Load of Model and Adapter"""

model, tokenizer = FastLanguageModel.from_pretrained(
    model_name = "unsloth/Llama-3.2-1B-Instruct-bnb-4bit",
    max_seq_length = 2048,
    dtype = None,
    load_in_4bit = True,
)
FastLanguageModel.for_inference(model) # Enable native 2x faster inference

model = FastLanguageModel.get_peft_model(
    model,
    r = 16, # Choose any number > 0 ! Suggested 8, 16, 32, 64, 128
    target_modules = ["q_proj", "k_proj", "v_proj", "o_proj",
                      "gate_proj", "up_proj", "down_proj",],
    lora_alpha = 16,
    lora_dropout = 0, # Supports any, but = 0 is optimized
    bias = "none",    # Supports any, but = "none" is optimized
    # [NEW] "unsloth" uses 30% less VRAM, fits 2x larger batch sizes!
    use_gradient_checkpointing = "unsloth", # True or "unsloth" for very long context
    random_state = 3407,
    use_rslora = False,  # We support rank stabilized LoRA
    loftq_config = None, # And LoftQ
)

"""#Data Prep"""

from unsloth.chat_templates import get_chat_template

tokenizer = get_chat_template(
    tokenizer,
    chat_template = "llama-3.1",
)

def formatting_prompts_func(examples):
    convos = examples["conversations"]
    texts = [tokenizer.apply_chat_template(convo, tokenize = False, add_generation_prompt = False) for convo in convos]
    return { "text" : texts, }
pass

from datasets import load_dataset
dataset = load_dataset("sfardin/dietAi-dataset-expanded", split = "train")

from unsloth.chat_templates import standardize_sharegpt
dataset = standardize_sharegpt(dataset)
dataset = dataset.map(formatting_prompts_func, batched = True,)

"""# Training Settings and Stats"""

from trl import SFTTrainer
from transformers import TrainingArguments, DataCollatorForSeq2Seq
from unsloth import is_bfloat16_supported

trainer = SFTTrainer(
    model = model,
    tokenizer = tokenizer,
    train_dataset = dataset,
    dataset_text_field = "text",
    max_seq_length = 2048,
    data_collator = DataCollatorForSeq2Seq(tokenizer = tokenizer),
    dataset_num_proc = 2,
    packing = False, # Can make training 5x faster for short sequences.
    args = TrainingArguments(
        per_device_train_batch_size = 2,
        gradient_accumulation_steps = 4,
        warmup_steps = 5,
        num_train_epochs = 1, # Set this for 1 full training run.
        max_steps = 60,
        learning_rate = 2e-4,
        fp16 = not is_bfloat16_supported(),
        bf16 = is_bfloat16_supported(),
        logging_steps = 1,
        optim = "adamw_8bit",
        weight_decay = 0.01,
        lr_scheduler_type = "linear",
        seed = 3407,
        output_dir = "outputs",
        report_to = "none", # Use this for WandB etc
    ),
)

from unsloth.chat_templates import train_on_responses_only
trainer = train_on_responses_only(
    trainer,
    instruction_part = "<|start_header_id|>user<|end_header_id|>\n\n",
    response_part = "<|start_header_id|>assistant<|end_header_id|>\n\n",
)

tokenizer.decode(trainer.train_dataset[5]["input_ids"])

space = tokenizer(" ", add_special_tokens = False).input_ids[0]
tokenizer.decode([space if x == -100 else x for x in trainer.train_dataset[5]["labels"]])

#@title Show current memory stats
gpu_stats = torch.cuda.get_device_properties(0)
start_gpu_memory = round(torch.cuda.max_memory_reserved() / 1024 / 1024 / 1024, 3)
max_memory = round(gpu_stats.total_memory / 1024 / 1024 / 1024, 3)
print(f"GPU = {gpu_stats.name}. Max memory = {max_memory} GB.")
print(f"{start_gpu_memory} GB of memory reserved.")

trainer_stats = trainer.train()

#@title Show final memory and time stats
used_memory = round(torch.cuda.max_memory_reserved() / 1024 / 1024 / 1024, 3)
used_memory_for_lora = round(used_memory - start_gpu_memory, 3)
used_percentage = round(used_memory         /max_memory*100, 3)
lora_percentage = round(used_memory_for_lora/max_memory*100, 3)
print(f"{trainer_stats.metrics['train_runtime']} seconds used for training.")
print(f"{round(trainer_stats.metrics['train_runtime']/60, 2)} minutes used for training.")
print(f"Peak reserved memory = {used_memory} GB.")
print(f"Peak reserved memory for training = {used_memory_for_lora} GB.")
print(f"Peak reserved memory % of max memory = {used_percentage} %.")
print(f"Peak reserved memory for training % of max memory = {lora_percentage} %.")

"""# Saving and Load of Trained Model"""

model.save_pretrained("caloriewisev1_model") # Local saving
tokenizer.save_pretrained("caloriewisev1_model")

model, tokenizer = FastLanguageModel.from_pretrained(
        model_name = "caloriewisev1_model", # YOUR MODEL YOU USED FOR TRAINING
        max_seq_length = 2048,
        dtype = None,
        load_in_4bit = True
    )
FastLanguageModel.for_inference(model) # Enable native 2x faster inference

"""# Precision, Recall And Accuracy"""

from datasets import load_dataset
import numpy as np
from sklearn.metrics import precision_score, recall_score, accuracy_score, f1_score

# Load the dataset
dataset = load_dataset("sfardin/dietAi-dataset-expanded", split="train")

# Define label mapping
label_mapping = {'human': 0, 'assistant': 1}

# Extract true labels (normalized to integers)
true_labels = np.array([
    label_mapping[conversation["from"]] for example in dataset for conversation in example["conversations"]
])

# Flatten the dataset into a single list of messages as features
input_features = np.array([
    conversation["value"] for example in dataset for conversation in example["conversations"]
])

# Debug: Print extracted labels and features
print("True Labels:", true_labels[:5])
print("Input Features:", input_features[:5])

# Evaluation function
def evaluate_metrics(true_labels, predicted_labels):
    """
    Evaluate and print precision, recall, accuracy, and F1 score.

    Parameters:
    - true_labels: List or numpy array of true labels.
    - predicted_labels: List or numpy array of predicted labels.

    Returns:
    - metrics: Dictionary containing precision, recall, accuracy, and F1 score.
    """
    precision = precision_score(true_labels, predicted_labels, average='weighted')
    recall = recall_score(true_labels, predicted_labels, average='weighted')
    accuracy = accuracy_score(true_labels, predicted_labels)
    f1 = f1_score(true_labels, predicted_labels, average='weighted')

    metrics = {
        'precision': precision,
        'recall': recall,
        'accuracy': accuracy,
        'f1_score': f1
    }

    print("Evaluation Metrics:")
    for key, value in metrics.items():
        print(f"{key.capitalize()}: {value:.4f}")

    return metrics

# Private mock model for testing
class _MockModel:
    def predict(self, features):
        """
        Simulate predictions by randomly assigning binary labels.
        """
        return np.random.randint(0, 2, size=len(features))  # Example binary classification

# Function to test with the mock model
def test_with_mock_model(input_features, true_labels):
    print("\nTesting with Mock Model:")
    mock_model = _MockModel()
    predicted_labels = mock_model.predict(input_features)
    metrics = evaluate_metrics(true_labels, predicted_labels)
    print("\nMetrics Dictionary:", metrics)

# Call the test function to ensure output
test_with_mock_model(input_features, true_labels)

"""# Generate Text"""

def generate_text():
    from transformers import TextStreamer

    # Set up TextStreamer for real-time streaming
    text_streamer = TextStreamer(tokenizer, skip_prompt=True)

    while True:
        try:
            # Prompt user for input
            user_input = input("You: ")

            # Exit the loop if the user types 'exit' or 'quit'
            if user_input.lower() in ["exit", "quit"]:
                print("Goodbye! Thank you for using CalorieWise Chatbot!")
                break

            # Create the structured input for the chat template
            chat_input = [{"role": "user", "content": user_input}]

            # Apply chat template and tokenize
            inputs = tokenizer.apply_chat_template(
                chat_input,  # Pass structured input
                tokenize=True,
                add_generation_prompt=True,  # Must add for generation
                return_tensors="pt",
            ).to("cuda:0")

            # Generate response with streaming
            text_streamer = TextStreamer(tokenizer, skip_prompt = True)
            _ = model.generate(
                input_ids=inputs,
                streamer=text_streamer,
                max_new_tokens=1000,
                use_cache=True,
                temperature=1.5,
                min_p=0.1,
            )

        except RuntimeError as e:
            print(f"Runtime error encountered: {e}")
            print("Attempting to recover... Clearing GPU cache.")
            import torch
            torch.cuda.empty_cache()
            continue
        except Exception as e:
            print(f"An unexpected error occurred: {e}")
            break

# Call the function
generate_text()